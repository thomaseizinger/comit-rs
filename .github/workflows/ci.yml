name: CI

on:
  push:
    branches:
      - 'staging'
      - 'trying'
      - 'master'
      - 'dev'
  pull_request:

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Install NodeJS 14.x
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          # The registry cache is useful as long as we need the same dependencies as another job, regardless of the Rust version and operating system.
          key: cargo-registry-${{ hashFiles('Cargo.lock') }}-v2

      - name: Cache cargo binaries
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          # The cargo binary cache is useful as long as we use the same Rust version but regardless of our dependencies.
          key: ubuntu-latest-cargo-binaries-${{ steps.toolchain.outputs.rustc_hash }}-v2

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          # The target directory is only useful with the same Rust version, dependencies and operating system.
          key: ubuntu-latest-target-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}-clippy-v2

      - name: Check formatting
        run: make check_format

      - name: Run linter
        run: make clippy

  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            e2e: true
          - os: macos-latest
            e2e: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          # The registry cache is useful as long as we need the same dependencies as another job, regardless of the Rust version and operating system.
          key: cargo-registry-${{ hashFiles('Cargo.lock') }}-v3

      - name: Cache cargo binaries
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          # The cargo binary cache is useful as long as we use the same Rust version and operating system, but regardless of our dependencies.
          key: ${{ matrix.os }}-cargo-binaries-${{ steps.toolchain.outputs.rustc_hash }}-v2

      - name: Cache target directory
        uses: actions/cache@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          path: target
          # The target directory is only useful with the same Rust version, dependencies and operating system.
          key: ${{ matrix.os }}-target-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}-build-v3

      - name: Build ${{ matrix.os }} binary
        run: make build

      - name: Build docs
        run: make doc

      # Ignore tests on macos due to missing docker
      - name: Run unit tests
        if: matrix.os == 'ubuntu-latest'
        run: make test

      - name: Upload cnd-${{ matrix.os }} archive that contains the cnd binary
        if: matrix.e2e
        uses: actions/upload-artifact@v1
        with:
          name: cnd-${{ matrix.os }}
          path: target/debug/cnd

      ## Run e2e tests
      - name: Install NodeJS 14.x
        if: matrix.e2e
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache node_modules directory
        if: matrix.e2e
        uses: actions/cache@v2
        with:
          path: api_tests/node_modules
          key: ${{ matrix.os }}-node-14-node-modules-directory-${{ hashFiles('api_tests/package.json') }}

      - name: Run e2e tests
        if: matrix.e2e
        run: |
          export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$PATH
          cd api_tests
          yarn install
          yarn ci

      - name: Upload bitcoind log
        if: matrix.e2e && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-logs-bitcoind.log
          path: api_tests/log/bitcoind/regtest/debug.log

      - name: Upload parity log
        if: matrix.e2e && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-logs-parity.log
          path: api_tests/log/parity/parity.log

      - name: Upload lnd logs
        if: matrix.e2e && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-logs-lnd
          path: api_tests/log/lnd-*/logs/bitcoin/regtest/lnd.log

      - name: Upload e2e logs
        if: matrix.e2e && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-test-logs
          path: api_tests/log/tests/
